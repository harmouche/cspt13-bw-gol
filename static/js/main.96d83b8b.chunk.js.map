{"version":3,"sources":["components/Box.js","components/Grid.js","components/Buttons.js","components/Main.js","components/Rules.js","App.js","index.js"],"names":["Box","selectBox","props","row","col","className","this","boxClass","id","onClick","React","Component","Grid","width","cols","rowsArr","i","rows","j","boxId","gridFull","push","key","style","Buttons","handleSelect","e","gridSize","ButtonToolbar","variant","Button","playButton","pauseButton","clear","slow","fast","seed","DropdownButton","title","onSelect","Dropdown","Item","eventKey","arrayClone","arr","JSON","parse","stringify","Main","gridCopy","state","setState","Math","floor","random","clearInterval","intervalId","setInterval","play","speed","grid","Array","fill","map","generation","size","g","g2","count","Rules","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.96d83b8b.chunk.js","sourcesContent":["import React from 'react';\n\nclass Box extends React.Component {\n    selectBox = () => {\n      this.props.selectBox(this.props.row, this.props.col)\n    }\n  \n  \n    render() {\n      return (\n        <div \n        className={this.props.boxClass}\n        id={this.props.id}\n        onClick={this.selectBox}\n        />\n      );\n    }\n  \n  }\n\n  export default Box;","import React from 'react';\nimport Box from './Box'\n\nclass Grid extends React.Component {\n    render() {\n      const width = (this.props.cols * 15);\n      var rowsArr = [];\n  \n      var boxClass = \"\";\n      for (var i = 0; i < this.props.rows; i++) {\n        for (var j = 0; j < this.props.cols; j++) {\n          let boxId = i + \" \" + j;\n  \n          boxClass = this.props.gridFull[i][j] ? \"box on\" : \"box off\";\n          rowsArr.push(\n            <Box \n              boxClass={boxClass}\n              key={boxId}\n              boxId={boxId}\n              row={i}\n              col={j}\n              selectBox={this.props.selectBox}\n            />\n          );\n        }\n      }\n  \n  \n      return (\n        <div className=\"grid\" style={{width: width}}>\n          {rowsArr}\n        \n        </div>\n      );}\n  }\n\n  export default Grid;","import React from 'react';\nimport {ButtonToolbar, Dropdown, DropdownButton } from 'react-bootstrap'\nimport Button from 'react-bootstrap/Button';\n\n\n\n\nclass Buttons extends React.Component{\n\n    handleSelect = (e) => {\n      this.props.gridSize(e);\n    }\n  \n    render() {\n      return(\n        <div className=\"center\">\n          <ButtonToolbar variant=\"warning\">\n            <Button variant=\"outline-success\" className=\"btn btn-default\" onClick={this.props.playButton}>Play</Button>\n            <Button variant=\"outline-success\" className=\"btn btn-default\" onClick={this.props.pauseButton}>Pause</Button>\n            <Button variant=\"outline-success\" className=\"btn btn-default\" onClick={this.props.clear}>Clear</Button>\n            <Button variant=\"outline-success\" className=\"btn btn-default\" onClick={this.props.slow}>Slow</Button>\n            <Button variant=\"outline-success\" className=\"btn btn-default\" onClick={this.props.fast}>Fast</Button>\n            <Button variant=\"outline-success\" className=\"btn btn-default\" onClick={this.props.seed}>Seed</Button>\n            <DropdownButton\n            variant=\"outline-success\" \n            title=\"Grid Size\"\n            id=\"size-menu\"\n            onSelect={this.handleSelect}\n            >\n              <Dropdown.Item eventKey=\"1\">20x10</Dropdown.Item>\n              <Dropdown.Item eventKey=\"2\">50x30</Dropdown.Item>\n              <Dropdown.Item eventKey=\"3\">70x50</Dropdown.Item>\n            </DropdownButton>\n          </ButtonToolbar>\n        </div>\n      )}\n  }\n\n  export default Buttons;","  import React from 'react';\n  import Grid from './Grid';\n  import Buttons from './Buttons'\n  \n  \n  \n  class Main extends React.Component {\n    constructor() {\n      super();\n      this.speed = 100\n      this.rows = 30\n      this.cols = 30\n  \n      this.state = {\n        generation: 0,\n        gridFull: Array(this.rows).fill().map(() => Array(this.cols).fill(false))\n      }\n    }\n  \n    selectBox = (row, col) => {\n      let gridCopy = arrayClone(this.state.gridFull);\n      gridCopy[row][col] = !gridCopy[row][col];\n      this.setState({\n        gridFull: gridCopy\n      });\n    }\n  \n    seed = () => {\n      let gridCopy = arrayClone(this.state.gridFull);\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.cols; j++) {\n          if(Math.floor(Math.random() * 4) === 1) {\n            gridCopy[i][j] = true;\n          };\n        }\n      }\n    \n      this.setState({\n        gridFull: gridCopy\n      });\n    }\n  \n  playButton = () => {\n    clearInterval(this.intervalId)\n    this.intervalId = setInterval(this.play, this.speed);\n  }\n  \n  pauseButton = () => {\n    clearInterval(this.intervalId);\n  }\n  \n  fast = () => {\n    this.speed = 100;\n    this.playButton();\n  }\n  \n  slow = () => {\n    this.speed = 1000;\n    this.playButton();\n  }\n  \n  clear = () => {\n    var grid = Array(this.rows).fill().map(() => Array(this.cols).fill(false));\n    this.setState({\n      gridFull: grid,\n      generation: 0\n    });\n  }\n  \n  gridSize = (size) => {\n    switch (size) {\n      case \"1\":\n        this.cols = 20;\n        this.rows = 10;\n      break;\n      case \"2\":\n        this.cols = 50;\n        this.rows = 30;\n      break;\n      default:\n        this.cols = 70;\n        this.rows = 50;\n      \n    }\n    this.clear();\n  }\n  \n  play = () => {\n    //Two copies of Grid for Buffer***\n    let g = this.state.gridFull;\n    let g2 = arrayClone(this.state.gridFull);\n  \n    //Game of Life Algorythym\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        let count = 0; //how many neighbors a cell has\n          if (i > 0) if (g[i - 1][j]) count++;\n              if (i > 0 && j > 0) if (g[i - 1][j - 1]) count++;\n              if (i > 0 && j < this.cols - 1) if (g[i - 1][j + 1]) count++;\n              if (j < this.cols - 1) if (g[i][j + 1]) count++;\n              if (j > 0) if (g[i][j - 1]) count++;\n              if (i < this.rows - 1) if (g[i + 1][j]) count++;\n              if (i < this.rows - 1 && j > 0) if (g[i + 1][j - 1]) count++;\n              if (i < this.rows - 1 && j < this.cols - 1) if (g[i + 1][j + 1]) count++;\n              if (g[i][j] && (count < 2 || count > 3)) g2[i][j] = false;\n              if (!g[i][j] && count === 3) g2[i][j] = true;\n      }\n    }\n    this.setState({\n      gridFull: g2,\n      generation: this.state.generation + 1\n    });\n  }\n  \n    componentDidMount() {\n      this.seed();\n      this.playButton();\n    }\n  \n    render() {\n      return (\n        <div>\n          <h1> The Game of Life</h1>\n          <Buttons \n          playButton={this.playButton}\n          pauseButton={this.pauseButton}\n          slow={this.slow}\n          fast={this.fast}\n          clear={this.clear}\n          seed={this.seed}\n          gridSize={this.gridSize}\n         \n         />\n          <Grid\n          gridFull={this.state.gridFull}\n          rows={this.rows}\n          cols={this.cols}\n          selectBox={this.selectBox}\n          />\n          <h2>Generations: {this.state.generation}</h2>\n        </div>\n      );\n    }\n  }\n  \n  // make a copy of the arr to use it when state changes\n  function arrayClone(arr) {\n    return JSON.parse(JSON.stringify(arr));\n  }\nexport default Main;  ","import React from 'react';\r\nimport '../App.css';\r\n\r\n\r\nclass Rules extends React.Component {\r\n    render() {\r\n        return(\r\n                <div className={'rules'}>\r\n                    <h3 >Rules</h3>\r\n                    <ul>\r\n                    <p>The universe of the Game of Life is an infinite, two-dimensional orthogonal grid of square cells, each of which is in one of two possible states, live or dead, (or populated and unpopulated, respectively). Every cell interacts with its eight neighbours, which are the cells that are horizontally, vertically, or diagonally adjacent. At each step in time, the following transitions occur:</p>\r\n                    <p>1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.</p>\r\n                    <p>2. Any live cell with two or three live neighbours lives on to the next generation.</p>\r\n                    <p>3. Any live cell with more than three live neighbours dies, as if by overpopulation.</p>\r\n                    <p>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</p>\r\n                    <p>4. The initial pattern constitutes the seed of the system. The first generation is created by applying the above rules simultaneously to every cell in the seed; births and deaths occur simultaneously, and the discrete moment at which this happens is sometimes called a tick. Each generation is a pure function of the preceding one. The rules continue to be applied repeatedly to create further generations.</p>\r\n                    <p></p>\r\n                    <p></p>\r\n                    </ul>\r\n                </div>\r\n        );  \r\n    }\r\n}\r\n\r\nexport default Rules;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router } from \"react-router-dom\"\nimport Main from './components/Main';\nimport Rules from './components/Rules'\n\nfunction App() {\n  return(\n  <Router>\n    <div className=\"App\">\n      <Main />\n      <Rules />\n    </div>\n  </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n<Router>\n    <App />\n</Router>\n    , rootElement);\n"],"sourceRoot":""}